/**
 * Microsoft Bot Framework Integration for ThachAI
 * Supports Azure Bot Service, Teams, and Cortana
 */

const { ActivityHandler, MessageFactory, CardFactory, ActionTypes } = require('botbuilder');
const { LuisRecognizer } = require('botbuilder-ai');
const axios = require('axios');

class ThachAIBot extends ActivityHandler {
    constructor() {
        super();
        
        // LUIS recognizer for natural language understanding
        this.luisRecognizer = new LuisRecognizer({
            applicationId: process.env.LUIS_APP_ID,
            endpointKey: process.env.LUIS_API_KEY,
            endpoint: process.env.LUIS_ENDPOINT
        });
        
        this.apiBaseUrl = process.env.API_BASE_URL || 'http://localhost:5000';
        
        // Handle message activities
        this.onMessage(async (context, next) => {
            const userMessage = context.activity.text;
            
            try {
                // Recognize intent using LUIS
                const luisResult = await this.luisRecognizer.recognize(context);
                const intent = LuisRecognizer.topIntent(luisResult);
                const entities = luisResult.entities;
                
                let responseText = '';
                let adaptiveCard = null;
                
                switch (intent) {
                    case 'CreateTikTokContent':
                        const response = await this.handleTikTokCreation(entities);
                        responseText = response.text;
                        adaptiveCard = response.card;
                        break;
                        
                    case 'CheckShopeePrice':
                        const shopeeResponse = await this.handleShopeeCheck(entities);
                        responseText = shopeeResponse.text;
                        adaptiveCard = shopeeResponse.card;
                        break;
                        
                    case 'SendMessage':
                        responseText = await this.handleSendMessage(entities);
                        break;
                        
                    case 'GetWeather':
                        responseText = await this.handleWeatherRequest();
                        break;
                        
                    case 'GetNews':
                        const newsResponse = await this.handleNewsRequest();
                        responseText = newsResponse.text;
                        adaptiveCard = newsResponse.card;
                        break;
                        
                    case 'Help':
                        responseText = this.getHelpMessage();
                        adaptiveCard = this.getHelpCard();
                        break;
                        
                    default:
                        responseText = await this.handleGeneralQuery(userMessage);
                        break;
                }
                
                // Send response
                if (adaptiveCard) {
                    await context.sendActivity(MessageFactory.attachment(adaptiveCard));
                }
                
                await context.sendActivity(MessageFactory.text(responseText));
                
            } catch (error) {
                console.error('Bot error:', error);
                await context.sendActivity(MessageFactory.text('Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.'));
            }
            
            await next();
        });
        
        // Handle members added
        this.onMembersAdded(async (context, next) => {
            const membersAdded = context.activity.membersAdded;
            const welcomeText = 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Th·∫°ch AI! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o n·ªôi dung TikTok, theo d√µi gi√° Shopee, g·ª≠i tin nh·∫Øn v√† nhi·ªÅu vi·ªác kh√°c. H√£y n√≥i "tr·ª£ gi√∫p" ƒë·ªÉ xem c√°c t√≠nh nƒÉng.';
            
            for (let cnt = 0; cnt < membersAdded.length; ++cnt) {
                if (membersAdded[cnt].id !== context.activity.recipient.id) {
                    await context.sendActivity(MessageFactory.text(welcomeText));
                    await context.sendActivity(MessageFactory.attachment(this.getWelcomeCard()));
                }
            }
            
            await next();
        });
    }
    
    async handleTikTokCreation(entities) {
        try {
            const topic = this.extractEntity(entities, 'topic') || 'xu h∆∞·ªõng hi·ªán t·∫°i';
            const audience = this.extractEntity(entities, 'audience') || 'gen-z';
            
            const response = await axios.post(`${this.apiBaseUrl}/api/tiktok/generate-content`, {
                topic: topic,
                category: 'general',
                duration: 30,
                audience: audience,
                style: 'viral'
            });
            
            if (response.status === 200) {
                const data = response.data;
                const text = `‚úÖ Script TikTok viral ƒë√£ t·∫°o th√†nh c√¥ng!\n\n**Ch·ªß ƒë·ªÅ:** ${topic}\n**Viral Score:** ${data.viral_score}/100\n**D·ª± ki·∫øn views:** ${data.estimated_views}\n\n**Script preview:** ${data.script.substring(0, 200)}...`;
                
                const card = this.createTikTokCard(data, topic);
                
                return { text, card };
            } else {
                return { text: 'Kh√¥ng th·ªÉ t·∫°o script TikTok l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.' };
            }
        } catch (error) {
            console.error('TikTok creation error:', error);
            return { text: 'D·ªãch v·ª• TikTok Creator t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.' };
        }
    }
    
    async handleShopeeCheck(entities) {
        try {
            const response = await axios.get(`${this.apiBaseUrl}/api/shopee/monitored-products`);
            
            if (response.status === 200) {
                const data = response.data;
                const products = data.products || [];
                const activeAlerts = data.active_alerts || 0;
                
                let text = `üìä **Shopee Price Monitor**\n\n`;
                text += `üîç ƒêang theo d√µi: **${products.length}** s·∫£n ph·∫©m\n`;
                text += `üö® C·∫£nh b√°o ho·∫°t ƒë·ªông: **${activeAlerts}** alerts\n\n`;
                
                if (products.length > 0) {
                    text += `**S·∫£n ph·∫©m g·∫ßn nh·∫•t:**\n`;
                    const latest = products[0];
                    text += `‚Ä¢ ${latest.name}\n`;
                    text += `‚Ä¢ Gi√°: ${latest.price.toLocaleString('vi-VN')}ƒë\n`;
                    text += `‚Ä¢ Gi·∫£m gi√°: ${latest.discount}%`;
                }
                
                const card = this.createShopeeCard(products, activeAlerts);
                
                return { text, card };
            } else {
                return { text: 'Kh√¥ng th·ªÉ truy c·∫≠p d·ªØ li·ªáu Shopee l√∫c n√†y.' };
            }
        } catch (error) {
            console.error('Shopee check error:', error);
            return { text: 'D·ªãch v·ª• Shopee Monitor t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.' };
        }
    }
    
    async handleSendMessage(entities) {
        const platform = this.extractEntity(entities, 'platform') || 'email';
        const content = this.extractEntity(entities, 'messageContent');
        
        if (!content) {
            return `B·∫°n mu·ªën g·ª≠i n·ªôi dung g√¨ qua ${platform}? Vui l√≤ng cung c·∫•p n·ªôi dung tin nh·∫Øn.`;
        }
        
        const platformNames = {
            'email': 'Email',
            'sms': 'SMS',
            'telegram': 'Telegram',
            'zalo': 'Zalo'
        };
        
        const platformName = platformNames[platform.toLowerCase()] || platform;
        return `üìß Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã g·ª≠i qua ${platformName}. Vui l√≤ng x√°c nh·∫≠n trong ·ª©ng d·ª•ng ƒë·ªÉ ho√†n t·∫•t g·ª≠i tin nh·∫Øn.`;
    }
    
    async handleWeatherRequest() {
        try {
            const response = await axios.get(`${this.apiBaseUrl}/api/data/latest`);
            
            if (response.status === 200) {
                const weather = response.data.weather || {};
                return `üå§Ô∏è **Th·ªùi ti·∫øt TP.HCM:**\n‚Ä¢ Nhi·ªát ƒë·ªô: ${weather.temperature}¬∞C\n‚Ä¢ ƒê·ªô ·∫©m: ${weather.humidity}%\n‚Ä¢ Gi√≥: ${weather.windSpeed} km/h\n‚Ä¢ T√¨nh tr·∫°ng: ${weather.condition}`;
            } else {
                return 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt l√∫c n√†y.';
            }
        } catch (error) {
            console.error('Weather request error:', error);
            return 'D·ªãch v·ª• th·ªùi ti·∫øt t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.';
        }
    }
    
    async handleNewsRequest() {
        try {
            const response = await axios.get(`${this.apiBaseUrl}/api/data/latest`);
            
            if (response.status === 200) {
                const news = response.data.news || [];
                
                if (news.length > 0) {
                    const latest = news[0];
                    const text = `üì∞ **Tin t·ª©c m·ªõi nh·∫•t:**\n\n**${latest.title}**\n\n${latest.description}\n\n*Ngu·ªìn: ${latest.source}*`;
                    
                    const card = this.createNewsCard(news);
                    
                    return { text, card };
                } else {
                    return { text: 'Hi·ªán t·∫°i ch∆∞a c√≥ tin t·ª©c m·ªõi.' };
                }
            } else {
                return { text: 'Kh√¥ng th·ªÉ truy c·∫≠p tin t·ª©c l√∫c n√†y.' };
            }
        } catch (error) {
            console.error('News request error:', error);
            return { text: 'D·ªãch v·ª• tin t·ª©c t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.' };
        }
    }
    
    async handleGeneralQuery(message) {
        try {
            const response = await axios.post(`${this.apiBaseUrl}/api/ai/voice-command`, {
                transcript: message,
                confidence: 0.9,
                language: 'vi'
            });
            
            if (response.status === 200) {
                return response.data.response;
            } else {
                return 'T√¥i l√† Th·∫°ch AI, tr·ª£ l√Ω th√¥ng minh c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p t·∫°o n·ªôi dung TikTok, theo d√µi gi√° Shopee, g·ª≠i tin nh·∫Øn v√† nhi·ªÅu vi·ªác kh√°c.';
            }
        } catch (error) {
            console.error('General query error:', error);
            return 'Xin ch√†o! T√¥i l√† Th·∫°ch AI, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c t√°c v·ª• s√°ng t·∫°o v√† kinh doanh.';
        }
    }
    
    getHelpMessage() {
        return `ü§ñ **Th·∫°ch AI - Tr·ª£ l√Ω th√¥ng minh**\n\n**T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n\nüé¨ T·∫°o n·ªôi dung TikTok viral\nüõí Theo d√µi gi√° s·∫£n ph·∫©m Shopee\nüì± G·ª≠i tin nh·∫Øn ƒëa n·ªÅn t·∫£ng\nüå§Ô∏è Ki·ªÉm tra th·ªùi ti·∫øt\nüì∞ ƒê·ªçc tin t·ª©c m·ªõi nh·∫•t\n\n**V√≠ d·ª• l·ªánh:**\n‚Ä¢ "T·∫°o video v·ªÅ c√¥ng ngh·ªá"\n‚Ä¢ "Ki·ªÉm tra gi√° iPhone"\n‚Ä¢ "G·ª≠i email"\n‚Ä¢ "Th·ªùi ti·∫øt h√¥m nay"`;
    }
    
    // Adaptive Card creators
    createTikTokCard(data, topic) {
        return CardFactory.adaptiveCard({
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.2",
            "body": [
                {
                    "type": "TextBlock",
                    "text": "üé¨ TikTok Script Created",
                    "weight": "Bolder",
                    "size": "Medium"
                },
                {
                    "type": "FactSet",
                    "facts": [
                        {
                            "title": "Topic:",
                            "value": topic
                        },
                        {
                            "title": "Viral Score:",
                            "value": `${data.viral_score}/100`
                        },
                        {
                            "title": "Estimated Views:",
                            "value": data.estimated_views
                        }
                    ]
                }
            ],
            "actions": [
                {
                    "type": "Action.OpenUrl",
                    "title": "Open TikTok Creator",
                    "url": `${this.apiBaseUrl}/tiktok`
                }
            ]
        });
    }
    
    createShopeeCard(products, activeAlerts) {
        const facts = [
            {
                "title": "Products Monitored:",
                "value": products.length.toString()
            },
            {
                "title": "Active Alerts:",
                "value": activeAlerts.toString()
            }
        ];
        
        if (products.length > 0) {
            const latest = products[0];
            facts.push({
                "title": "Latest Product:",
                "value": latest.name
            });
            facts.push({
                "title": "Price:",
                "value": `${latest.price.toLocaleString('vi-VN')}ƒë`
            });
        }
        
        return CardFactory.adaptiveCard({
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.2",
            "body": [
                {
                    "type": "TextBlock",
                    "text": "üõí Shopee Price Monitor",
                    "weight": "Bolder",
                    "size": "Medium"
                },
                {
                    "type": "FactSet",
                    "facts": facts
                }
            ],
            "actions": [
                {
                    "type": "Action.OpenUrl",
                    "title": "Open Shopee Monitor",
                    "url": `${this.apiBaseUrl}/shopee`
                }
            ]
        });
    }
    
    createNewsCard(news) {
        const columns = news.slice(0, 3).map(item => ({
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "text": item.title,
                    "weight": "Bolder",
                    "size": "Small",
                    "wrap": true
                },
                {
                    "type": "TextBlock",
                    "text": item.source,
                    "size": "Small",
                    "color": "Accent"
                }
            ]
        }));
        
        return CardFactory.adaptiveCard({
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.2",
            "body": [
                {
                    "type": "TextBlock",
                    "text": "üì∞ Latest News",
                    "weight": "Bolder",
                    "size": "Medium"
                },
                {
                    "type": "ColumnSet",
                    "columns": columns
                }
            ]
        });
    }
    
    getWelcomeCard() {
        return CardFactory.adaptiveCard({
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.2",
            "body": [
                {
                    "type": "TextBlock",
                    "text": "ü§ñ Th·∫°ch AI Assistant",
                    "weight": "Bolder",
                    "size": "Large"
                },
                {
                    "type": "TextBlock",
                    "text": "Tr·ª£ l√Ω AI th√¥ng minh cho content creator v√† doanh nh√¢n",
                    "wrap": true
                },
                {
                    "type": "TextBlock",
                    "text": "‚ú® **Main Features:**",
                    "weight": "Bolder"
                },
                {
                    "type": "TextBlock",
                    "text": "‚Ä¢ TikTok viral content creation\n‚Ä¢ Shopee price monitoring\n‚Ä¢ Multi-platform messaging\n‚Ä¢ Weather & news updates",
                    "wrap": true
                }
            ],
            "actions": [
                {
                    "type": "Action.Submit",
                    "title": "Create TikTok Content",
                    "data": {
                        "action": "create_tiktok"
                    }
                },
                {
                    "type": "Action.Submit",
                    "title": "Check Shopee Prices",
                    "data": {
                        "action": "check_shopee"
                    }
                }
            ]
        });
    }
    
    getHelpCard() {
        return CardFactory.adaptiveCard({
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.2",
            "body": [
                {
                    "type": "TextBlock",
                    "text": "üÜò How to Use Th·∫°ch AI",
                    "weight": "Bolder",
                    "size": "Medium"
                },
                {
                    "type": "TextBlock",
                    "text": "**Example Commands:**",
                    "weight": "Bolder"
                },
                {
                    "type": "TextBlock",
                    "text": "‚Ä¢ \"T·∫°o video v·ªÅ c√¥ng ngh·ªá\"\n‚Ä¢ \"Ki·ªÉm tra gi√° iPhone\"\n‚Ä¢ \"G·ª≠i email cho kh√°ch h√†ng\"\n‚Ä¢ \"Th·ªùi ti·∫øt h√¥m nay\"\n‚Ä¢ \"Tin t·ª©c m·ªõi nh·∫•t\"",
                    "wrap": true
                }
            ]
        });
    }
    
    extractEntity(entities, entityName) {
        const entity = entities[entityName];
        if (entity && entity.length > 0) {
            return entity[0];
        }
        return null;
    }
}

module.exports.ThachAIBot = ThachAIBot;